@page "/color/{Id}"
@inject IJSRuntime JS
@inject NavigationManager Nav
@using System.Collections.Generic
@using System.Linq
@using System
@using Roulette.Models

<PageTitle>色設定ツール - ルーレット</PageTitle>

<h3>色一括設定ツール</h3>

<p>項目の色を一括で設定します。指定した明度と彩度を元に、色味を調整して色を生成します。</p>

<div class="mb-3">
    <label class="form-label">明度: @lightness.ToString("0.00")</label>
    <input type="range" class="form-range" min="0" max="1" step="0.01" @bind="lightness" @bind:event="oninput" />
</div>

<div class="mb-3">
    <label class="form-label">彩度: @chroma.ToString("0.00")</label>
    <input type="range" class="form-range" min="0" max="0.4" step="0.01" @bind="chroma" @bind:event="oninput" />
</div>

<div class="d-flex mb-3">
    <span>色見本:</span>
    @foreach (var color in previewColors)
    {
        <div class="preview-box me-2" style="background-color:@color"></div>
    }
</div>

<div class="mb-3 d-flex">
    <button class="btn btn-primary" @onclick="AssignEven">均等</button>
    <button class="btn btn-primary ms-2" @onclick="AssignRandom">ランダム</button>
    <button class="btn btn-secondary ms-auto" @onclick="Back">戻る</button>
</div>

@code {
    [Parameter]
    public string? Id { get; set; }

    private List<RouletteItem> items = new();
    private List<RouletteConfig> configs = new();
    private RouletteConfig? currentConfig;

    private double _lightness = 0.8;
    private double lightness
    {
        get => _lightness;
        set
        {
            _lightness = value;
            UpdatePreview();
        }
    }

    private double _chroma = 0.1;
    private double chroma
    {
        get => _chroma;
        set
        {
            _chroma = value;
            UpdatePreview();
        }
    }

    private readonly Random rand = new();
    private readonly string[] previewColors = new string[3];

    protected override async Task OnInitializedAsync()
    {
        configs = await RouletteConfig.LoadAsync(JS);

        if (string.IsNullOrEmpty(Id))
        {
            Nav.NavigateTo("setting");
            return;
        }

        currentConfig = configs.FirstOrDefault(c => c.Id == Id);
        if (currentConfig is null)
        {
            Nav.NavigateTo("setting");
            return;
        }

        items = currentConfig.Items.ToList();
        if (items.Count > 0)
        {
            var (l, c, _) = ColorUtil.HexToOklch(items[^1].Color);
            _lightness = Math.Clamp(l, 0, 1);
            _chroma = Math.Clamp(c, 0, 0.4);
        }

        UpdatePreview();
    }

    private async Task AssignEven()
    {
        if (items.Count == 0) return;
        for (int i = 0; i < items.Count; i++)
        {
            var hue = 360.0 * i / items.Count;
            items[i].Color = ColorUtil.OklchToHex(lightness, chroma, hue);
        }
        await SaveAsync();
        Back();
    }

    private async Task AssignRandom()
    {
        if (items.Count == 0) return;

        var hues = Enumerable.Range(0, items.Count)
            .Select(i => 360.0 * i / items.Count)
            .ToList();

        for (int i = hues.Count - 1; i > 0; i--)
        {
            int j = rand.Next(i + 1);
            (hues[i], hues[j]) = (hues[j], hues[i]);
        }

        for (int i = 0; i < items.Count; i++)
        {
            items[i].Color = ColorUtil.OklchToHex(lightness, chroma, hues[i]);
        }

        await SaveAsync();
        Back();
    }

    private void UpdatePreview()
    {
        for (int i = 0; i < previewColors.Length; i++)
        {
            var hue = 360.0 * i / previewColors.Length;
            previewColors[i] = ColorUtil.OklchToHex(lightness, chroma, hue);
        }
    }

    private async Task SaveAsync()
    {
        if (currentConfig is not null)
        {
            currentConfig.Items = items;
            await RouletteConfig.SaveAsync(JS, configs);
        }
    }

    private void Back()
    {
        Nav.NavigateTo($"setting/{Id}");
    }

    
}
