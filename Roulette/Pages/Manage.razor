@page "/"
@inject IJSRuntime JS
@inject NavigationManager Nav
@using System.Text.Json
@using System.Collections.Generic
@using System.Linq
@using System
@using Roulette.Models

<PageTitle>設定一覧 - ルーレット</PageTitle>

<h3>ルーレット設定一覧</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="NewConfig">新規作成</button>
    <button class="btn btn-secondary ms-2" @onclick="TriggerImport">設定ファイル取り込み</button>
    <InputFile OnChange="ImportConfig" style="display:none" @ref="importInput" accept="application/json" />
</div>

@if (configs.Count == 0)
{
    <p>設定がありません。</p>
}
else
{
    <ul class="list-group">
        @foreach (var cfg in configs)
        {
            <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-center config-item pe-2" @onclick="() => SelectConfig(cfg.Id)">
                <span>@cfg.Name</span>
                <span class="btn-group btn-group-sm">
                    <button class="btn btn-secondary" @onclick="() => ExportConfig(cfg)" @onclick:stopPropagation="true">書き出し</button>
                    <button class="btn btn-danger" @onclick="() => DeleteConfig(cfg.Id)" @onclick:stopPropagation="true">削除</button>
                </span>
            </li>
        }
    </ul>
}

<div class="commit-hash">
    hash: <code title="@Program.CommitHash">@(Program.CommitHash.Length > 7 ? Program.CommitHash[..7] : Program.CommitHash)</code>
</div>

@code {
    [SupplyParameterFromQuery(Name = "url")]
    private string? Url { get; set; }

    private List<RouletteConfig> configs = new();
    private InputFile? importInput;

    protected override async Task OnInitializedAsync()
    {
        if (Url is { })
        {
            if (string.IsNullOrEmpty(new Uri(Url).Host)) Nav.NavigateTo(Url, false, true);
            else Nav.NavigateTo(Nav.BaseUri, false, true);
            return;
        }

        configs = await RouletteConfig.LoadAsync(JS);
    }

    private void NewConfig()
    {
        Nav.NavigateTo("setting");
    }

    private void SelectConfig(string id)
    {
        Nav.NavigateTo($"{id}");
    }

    private async Task ExportConfig(RouletteConfig cfg)
    {
        var exportObj = new
        {
            cfg.Name,
            cfg.Items,
            cfg.AutoAdjustSize
        };
        var json = JsonSerializer.Serialize(exportObj, JsonUtil.WebOptions);
        var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
        var baseName = string.IsNullOrWhiteSpace(cfg.Name) ? "config" : cfg.Name;
        var fileName = $"{baseName}_{timestamp}.json";
        await JS.InvokeVoidAsync("downloadFile", fileName, json);
    }

    private async Task DeleteConfig(string id)
    {
        var cfg = configs.FirstOrDefault(c => c.Id == id);
        if (cfg is not null && configs.Remove(cfg))
        {
            await RouletteConfig.SaveAsync(JS, configs);
            StateHasChanged();
        }
    }

    private async Task TriggerImport()
    {
        if (importInput is not null)
        {
            await JS.InvokeVoidAsync("triggerInputFile", importInput.Element);
        }
    }

    private async Task ImportConfig(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 0) return;
        var file = e.File;
        using var stream = file.OpenReadStream(file.Size);
        var cfg = await JsonSerializer.DeserializeAsync<RouletteConfig>(stream, JsonUtil.WebOptions);
        if (cfg is null) return;
        if (string.IsNullOrWhiteSpace(cfg.Id)) cfg.Id = Guid.NewGuid().ToString("N");
        configs.Add(cfg);
        await RouletteConfig.SaveAsync(JS, configs);
        StateHasChanged();
    }
}
