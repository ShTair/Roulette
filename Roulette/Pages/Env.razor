@page "/env"
@inject IJSRuntime JS
@inject NavigationManager Nav
@using Roulette.Models

<PageTitle>環境設定 - ルーレット</PageTitle>

<h3>環境設定</h3>

<div class="mb-3">
    <label class="form-label">止まり始めるまでの最小時間 (秒)</label>
    <input type="number" step="0.1" min="0" class="form-control" @bind="settings.AutoStopDelayMinSeconds" />
</div>
<div class="mb-3">
    <label class="form-label">止まり始めるまでの最大時間 (秒)</label>
    <input type="number" step="0.1" min="0" class="form-control" @bind="settings.AutoStopDelayMaxSeconds" />
</div>
<div class="mb-3">
    <label class="form-label">止まり始めてから完全に止まるまでの時間 (秒)</label>
    <input type="number" step="0.1" min="0.1" class="form-control" @bind="settings.StopDurationSeconds" />
</div>
<div class="mb-3">
    <label class="form-label">回転速度</label>
    <input type="number" step="0.1" min="0.1" class="form-control" @bind="settings.StartSpeed" />
</div>
<div class="mb-3">
    <label class="form-label">ルーレット盤の枠線の色</label>
    <input type="color" class="form-control form-control-color" @bind="settings.BorderColor" />
</div>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="Save">保存</button>
    <button class="btn btn-secondary ms-2" @onclick="Back">戻る</button>
</div>

@code {
    private AppSettings settings = new();

    protected override async Task OnInitializedAsync()
    {
        settings = await AppSettings.LoadAsync(JS);
    }

    private async Task Save()
    {
        if (settings.AutoStopDelayMaxSeconds < settings.AutoStopDelayMinSeconds)
        {
            settings.AutoStopDelayMaxSeconds = settings.AutoStopDelayMinSeconds;
        }
        await AppSettings.SaveAsync(JS, settings);
        Nav.NavigateTo("");
    }

    private void Back()
    {
        Nav.NavigateTo("");
    }
}
