@page "/setting/{Id?}"
@inject IJSRuntime JS
@inject NavigationManager Nav
@using System.Text.Json
@using System.Collections.Generic
@using System.Linq
@using Roulette.Models

<PageTitle>設定『@configName』 - ルーレット</PageTitle>

<h3>ルーレットの設定</h3>

<div class="mb-3">
    <label class="form-label">設定名</label>
    <input class="form-control" @bind="configName" @bind:after="MarkDirty" />
</div>

<div class="form-check mb-3">
    <input class="form-check-input" type="checkbox" id="autoSize" @bind="autoAdjustSize" @bind:after="MarkDirty" />
    <label class="form-check-label" for="autoSize">大きさ自動調整</label>
</div>

<div class="mb-3 d-flex align-items-center">
    <label class="form-label me-2 mb-0">表示倍数</label>
    <input type="number" class="form-control multiplier-input" @bind="itemMultiplier" min="1" @bind:after="MarkDirty" />
</div>

@for (int i = 0; i < items.Count; i++)
{
    var index = i;
    <div class="mb-2 item-row">
        <button class="btn btn-outline-secondary state-button" @onclick="() => ToggleState(index)" title="@GetStateTitle(items[index].State)">@GetStateIcon(items[index].State)</button>

        <input class="form-control text-input" style="background-color:@items[index].BackgroundColor;color:@items[index].ForegroundColor" @bind="items[index].Text" @bind:after="MarkDirty" @onfocus="() => activeIndex = index" />

        @if (activeIndex == index)
        {
            <div class="detail-container">
                <div class="action-buttons">
                    <button class="btn btn-outline-danger" @onclick="() => Remove(index)">削除</button>
                    <div class="move-buttons btn-group">
                        <button class="btn btn-outline-secondary" @onclick="() => MoveUp(index)" disabled="@(index == 0)">↑</button>
                        <button class="btn btn-outline-secondary" @onclick="() => MoveDown(index)" disabled="@(index == items.Count - 1)">↓</button>
                    </div>
                </div>
                <div class="detail-row">
                    <label class="form-label me-2 mb-0">文字色</label>
                    <input class="form-check-input me-1" type="checkbox" id="@($"fgManual{index}")" checked="@(!items[index].AutoForegroundColor)" @onchange="(e) => { items[index].AutoForegroundColor = !(bool)e.Value!; MarkDirty(); }" />
                    @if (items[index].AutoForegroundColor)
                    {
                        <span class="form-label me-3 mb-0">自動</span>
                    }
                    else
                    {
                        <input type="color" class="form-control color-input me-3" @bind="items[index].ForegroundColor" @bind:after="MarkDirty" />
                    }
                    <label class="form-label me-2 mb-0">背景色</label>
                    <input type="color" class="form-control color-input" @bind="items[index].BackgroundColor" @bind:after="MarkDirty" />
                </div>
                <div class="detail-row">
                    <label class="form-label me-2 mb-0">当たり回数</label>
                    <input type="number" class="form-control count-input" @bind="items[index].Count" @bind:after="MarkDirty" />
                    @if (!autoAdjustSize)
                    {
                        <label class="form-label ms-3 me-2 mb-0">大きさ</label>
                        <input type="number" step="1" class="form-control size-input" @bind="items[index].Size" @bind:after="MarkDirty" />
                    }
                </div>
            </div>
        }
    </div>
}

<div class="mb-3 d-flex">
    <button class="btn btn-secondary" @onclick="Add">追加</button>
</div>

<ColorTool Items="items" OnChanged="MarkDirty" />

<CsvTool Items="items" CurrentConfig="currentConfig" OnChanged="MarkDirty" />

<div class="mb-3 d-flex">
    <button class="btn btn-primary ms-auto" @onclick="Save">保存</button>
    <button class="btn btn-secondary ms-2" @onclick="Back">戻る</button>
</div>

@code {
    [Parameter]
    public string? Id { get; set; }

    private List<RouletteItem> items = new()
    {
        RouletteItem.Create("A"),
        RouletteItem.Create("B"),
        RouletteItem.Create("C")
    };
    private string configName = "新しいルーレット";
    private List<RouletteConfig> configs = new();
    private RouletteConfig? currentConfig;
    private bool autoAdjustSize = true;
    private int itemMultiplier = 1;
    private bool isDirty = true;
    private int? activeIndex = null;
    private void MarkDirty() => isDirty = true;

    private void ToggleState(int index)
    {
        var item = items[index];
        item.State = item.State switch
        {
            RouletteItemState.Locked => RouletteItemState.Enabled,
            RouletteItemState.Enabled => RouletteItemState.Disabled,
            _ => RouletteItemState.Locked
        };
        MarkDirty();
    }

    private static string GetStateIcon(RouletteItemState state) => state switch
    {
        RouletteItemState.Locked => "🔒",
        RouletteItemState.Enabled => "✅",
        RouletteItemState.Disabled => "🚫",
        _ => string.Empty
    };

    private static string GetStateTitle(RouletteItemState state) => state switch
    {
        RouletteItemState.Locked => "🔒表示",
        RouletteItemState.Enabled => "表示",
        RouletteItemState.Disabled => "非表示",
        _ => string.Empty
    };

    protected override async Task OnInitializedAsync()
    {
        configs = await RouletteConfig.LoadAsync(JS);

        if (!string.IsNullOrEmpty(Id))
        {
            currentConfig = configs.FirstOrDefault(c => c.Id == Id);
            if (currentConfig is not null)
            {
                configName = currentConfig.Name;
                items = currentConfig.Items.ToList();
                autoAdjustSize = currentConfig.AutoAdjustSize;
                itemMultiplier = currentConfig.ItemMultiplier;
            }
        }
        isDirty = string.IsNullOrEmpty(Id);
        // When creating a new configuration, keep the default A/B/C items
    }

    private void Add()
    {
        string? baseBgColor = items.Count > 0 ? items[items.Count - 1].BackgroundColor : null;
        string? baseFgColor = items.Count > 0 ? items[items.Count - 1].ForegroundColor : null;
        bool autoFg = items.Count > 0 ? items[items.Count - 1].AutoForegroundColor : true;
        var item = RouletteItem.Create("", baseBgColor);

        if (items.Count > 0)
        {
            item.State = items[items.Count - 1].State;
        }

        item.AutoForegroundColor = autoFg;
        if (!autoFg)
        {
            item.ForegroundColor = RouletteItem.RandomColor(baseFgColor);
        }

        items.Add(item);
        MarkDirty();
    }

    private void Remove(int index)
    {
        if (index >= 0 && index < items.Count)
        {
            items.RemoveAt(index);
        }
        MarkDirty();
    }

    private void MoveItem(int index, int offset)
    {
        var newIndex = index + offset;
        if (newIndex < 0 || newIndex >= items.Count) return;
        (items[newIndex], items[index]) = (items[index], items[newIndex]);
        if (activeIndex == index)
        {
            activeIndex = newIndex;
        }
        else if (activeIndex == newIndex)
        {
            activeIndex = index;
        }
        MarkDirty();
    }

    private void MoveUp(int index) => MoveItem(index, -1);

    private void MoveDown(int index) => MoveItem(index, 1);

    private async Task Save()
    {
        configName = configName.Trim();
        if (string.IsNullOrWhiteSpace(configName))
        {
            await JS.InvokeVoidAsync("alert", "設定名を入力してください。");
            return;
        }

        foreach (var item in items)
        {
            item.Text = item.Text.Trim();
        }

        var arr = items
            .Where(x => !string.IsNullOrWhiteSpace(x.Text))
            .ToList();

        if (arr.Count == 0 || arr.Count != items.Count)
        {
            await JS.InvokeVoidAsync("alert", "項目を1つ以上設定し、すべての項目名を入力してください。");
            return;
        }

        if (currentConfig is null)
        {
            currentConfig = new RouletteConfig();
            configs.Add(currentConfig);
        }

        currentConfig.Name = configName;
        currentConfig.Items = arr;
        currentConfig.AutoAdjustSize = autoAdjustSize;
        currentConfig.ItemMultiplier = itemMultiplier;

        await RouletteConfig.SaveAsync(JS, configs);
        await JS.InvokeVoidAsync("localStorage.setItem", "rouletteItems", JsonSerializer.Serialize(arr));
        Nav.NavigateTo($"{currentConfig.Id}");
    }

    private void Back()
    {
        if (string.IsNullOrEmpty(Id))
        {
            Nav.NavigateTo("");
        }
        else
        {
            Nav.NavigateTo($"{Id}");
        }
    }
}
