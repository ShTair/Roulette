@page "/setting/{Id?}"
@inject IJSRuntime JS
@inject NavigationManager Nav
@using System.Text.Json
@using System.Collections.Generic
@using System.Linq
@using System
@using System.IO
@using Roulette.Models
@using nietras.SeparatedValues

<PageTitle>設定『@configName』 - ルーレット</PageTitle>

<h3>ルーレットの設定</h3>

<div class="mb-3">
    <label class="form-label">設定名</label>
    <input class="form-control" @bind="configName" @bind:after="MarkDirty" />
</div>

<div class="form-check mb-3">
    <input class="form-check-input" type="checkbox" id="autoSize" @bind="autoAdjustSize" @bind:after="MarkDirty" />
    <label class="form-check-label" for="autoSize">大きさ自動調整</label>
</div>

<div class="mb-3 d-flex align-items-center">
    <label class="form-label me-2 mb-0">表示倍数</label>
    <input type="number" class="form-control multiplier-input" @bind="itemMultiplier" min="1" @bind:after="MarkDirty" />
</div>

@for (int i = 0; i < items.Count; i++)
{
    var index = i;
    <div class="mb-2 item-row">
        <input type="color" class="form-control color-input" @bind="items[index].Color" @bind:after="MarkDirty" />

        <input class="form-control text-input" @bind="items[index].Text" @bind:after="MarkDirty" />

        <div class="control-row">
            <button class="btn btn-outline-secondary state-button" @onclick="() => ToggleState(index)" title="@GetStateTitle(items[index].State)">@GetStateIcon(items[index].State)</button>
            <input type="number" class="form-control count-input" @bind="items[index].Count" @bind:after="MarkDirty" />
            @if (!autoAdjustSize)
            {
                <input type="number" step="1" class="form-control size-input" @bind="items[index].Size" @bind:after="MarkDirty" />
            }
            <button class="btn btn-outline-danger" @onclick="() => Remove(index)">削除</button>
        </div>

        <button class="btn btn-outline-secondary move-up-button" @onclick="() => MoveUp(index)" disabled="@(index == 0)">↑</button>
        <button class="btn btn-outline-secondary move-down-button" @onclick="() => MoveDown(index)" disabled="@(index == items.Count - 1)">↓</button>
    </div>
}

<div class="mb-3 d-flex">
    <button class="btn btn-secondary" @onclick="Add">追加</button>
    <button class="btn btn-warning ms-2" @onclick="ResetAllCounts">当たり回数リセット</button>
    <button class="btn btn-primary ms-auto" @onclick="Save">保存</button>
    <button class="btn btn-secondary ms-2" @onclick="Back">戻る</button>
</div>

<div class="mb-3">
    <button class="btn btn-secondary" data-bs-toggle="collapse" data-bs-target="#colorTool" disabled="@isDirty">色一括設定ツール</button>
</div>
<div class="collapse" id="colorTool">
    <div class="mb-3">
        <label class="form-label">明度: @lightness.ToString("0.00")</label>
        <input type="range" class="form-range" min="0" max="1" step="0.01" @bind="lightness" @bind:event="oninput" />
    </div>
    <div class="mb-3">
        <label class="form-label">彩度: @chroma.ToString("0.00")</label>
        <input type="range" class="form-range" min="0" max="0.4" step="0.01" @bind="chroma" @bind:event="oninput" />
    </div>
    <div class="d-flex mb-3">
        <span>色見本:</span>
        @foreach (var color in previewColors)
        {
            <div class="preview-box me-2" style="background-color:@color"></div>
        }
    </div>
    <div class="mb-3 d-flex">
        <button class="btn btn-primary" @onclick="AssignEven">均等</button>
        <button class="btn btn-primary ms-2" @onclick="AssignRandom">ランダム</button>
    </div>
</div>

<div class="mb-3">
    <button class="btn btn-secondary" data-bs-toggle="collapse" data-bs-target="#csvTool" disabled="@isDirty">CSVツール</button>
</div>
<div class="collapse" id="csvTool">
    <div class="alert alert-warning">
        <p class="mb-1">
            この機能は設定一覧ページの「設定書き出し」とは目的が異なり、現在開いているルーレット項目だけを CSV で編集するためのものです。読み込み時は次のルールで反映されます。
        </p>
        <ul class="mb-0">
            <li>同じ項目名の行は既存の値を CSV の内容で上書きします。項目名が重複しているとどの行が使われるか分からず、正しく更新できません。</li>
            <li>CSV に存在しない項目名の行は新しい項目として追加されます。</li>
            <li>セルが空白だったり CSV に列が無い値は、現在の設定値がそのまま維持されます。</li>
            <li>新しく追加された項目で空白のままの値には、背景色や当たり数などの初期値が自動で設定されます。</li>
        </ul>
    </div>
    <div class="mb-3 d-flex">
        <button class="btn btn-secondary" @onclick="ExportCsv">CSV書き出し</button>
        <button class="btn btn-secondary ms-2" @onclick="TriggerCsvImport">CSV読み込み</button>
        <InputFile OnChange="ImportCsv" style="display:none" @ref="csvInput" accept=".csv,text/csv" />
    </div>
</div>

@code {
    [Parameter]
    public string? Id { get; set; }

    private List<RouletteItem> items = new()
    {
        RouletteItem.Create("A"),
        RouletteItem.Create("B"),
        RouletteItem.Create("C")
    };
    private string configName = "新しいルーレット";
    private List<RouletteConfig> configs = new();
    private RouletteConfig? currentConfig;
    private bool autoAdjustSize = true;
    private int itemMultiplier = 1;
    private bool isDirty = true;
    private double _lightness = 0.8;
    private double lightness
    {
        get => _lightness;
        set
        {
            _lightness = value;
            UpdatePreview();
        }
    }
    private double _chroma = 0.1;
    private double chroma
    {
        get => _chroma;
        set
        {
            _chroma = value;
            UpdatePreview();
        }
    }
    private readonly Random rand = new();
    private readonly string[] previewColors = new string[3];
    private InputFile? csvInput;

    private void MarkDirty() => isDirty = true;

    private void ToggleState(int index)
    {
        var item = items[index];
        item.State = item.State switch
        {
            RouletteItemState.Locked => RouletteItemState.Enabled,
            RouletteItemState.Enabled => RouletteItemState.Disabled,
            _ => RouletteItemState.Locked
        };
        MarkDirty();
    }

    private static string GetStateIcon(RouletteItemState state) => state switch
    {
        RouletteItemState.Locked => "🔒",
        RouletteItemState.Enabled => "✅",
        RouletteItemState.Disabled => "🚫",
        _ => string.Empty
    };

    private static string GetStateTitle(RouletteItemState state) => state switch
    {
        RouletteItemState.Locked => "🔒表示",
        RouletteItemState.Enabled => "表示",
        RouletteItemState.Disabled => "非表示",
        _ => string.Empty
    };

    protected override async Task OnInitializedAsync()
    {
        configs = await RouletteConfig.LoadAsync(JS);

        if (!string.IsNullOrEmpty(Id))
        {
            currentConfig = configs.FirstOrDefault(c => c.Id == Id);
            if (currentConfig is not null)
            {
                configName = currentConfig.Name;
                items = currentConfig.Items.ToList();
                autoAdjustSize = currentConfig.AutoAdjustSize;
                itemMultiplier = currentConfig.ItemMultiplier;
            }
        }
        isDirty = string.IsNullOrEmpty(Id);
        if (items.Count > 0)
        {
            var (l, c, _) = ColorUtil.HexToOklch(items[^1].Color);
            _lightness = Math.Clamp(l, 0, 1);
            _chroma = Math.Clamp(c, 0, 0.4);
        }
        UpdatePreview();
        // When creating a new configuration, keep the default A/B/C items
    }

    private void Add()
    {
        string? baseColor = items.Count > 0 ? items[items.Count - 1].Color : null;
        var item = RouletteItem.Create("", baseColor);

        if (items.Count > 0)
        {
            item.State = items[items.Count - 1].State;
        }

        items.Add(item);
        MarkDirty();
    }

    private void Remove(int index)
    {
        if (index >= 0 && index < items.Count)
        {
            items.RemoveAt(index);
        }
        MarkDirty();
    }

    private void MoveItem(int index, int offset)
    {
        var newIndex = index + offset;
        if (newIndex < 0 || newIndex >= items.Count) return;
        (items[newIndex], items[index]) = (items[index], items[newIndex]);
        MarkDirty();
    }

    private void MoveUp(int index) => MoveItem(index, -1);

    private void MoveDown(int index) => MoveItem(index, 1);

    private void ResetAllCounts()
    {
        foreach (var item in items)
        {
            item.Count = 0;
        }
        MarkDirty();
    }

    private void AssignEven()
    {
        if (items.Count == 0) return;
        for (int i = 0; i < items.Count; i++)
        {
            var hue = 360.0 * i / items.Count;
            items[i].Color = ColorUtil.OklchToHex(lightness, chroma, hue);
        }
        MarkDirty();
    }

    private void AssignRandom()
    {
        if (items.Count == 0) return;

        var hues = Enumerable.Range(0, items.Count)
            .Select(i => 360.0 * i / items.Count)
            .ToList();

        for (int i = hues.Count - 1; i > 0; i--)
        {
            int j = rand.Next(i + 1);
            (hues[i], hues[j]) = (hues[j], hues[i]);
        }

        for (int i = 0; i < items.Count; i++)
        {
            items[i].Color = ColorUtil.OklchToHex(lightness, chroma, hues[i]);
        }
        MarkDirty();
    }

    private void UpdatePreview()
    {
        for (int i = 0; i < previewColors.Length; i++)
        {
            var hue = 360.0 * i / previewColors.Length;
            previewColors[i] = ColorUtil.OklchToHex(lightness, chroma, hue);
        }
    }

    private string GenerateCsv()
    {
        using var writer = Sep.Writer(o => o with { Sep = new Sep(',') }).ToText();
        foreach (var item in items)
        {
            using var row = writer.NewRow();
            row["項目名"].Set(item.Text);
            row["背景色"].Set(item.Color);
            row["当たり数"].Format(item.Count);
            row["サイズ"].Format(item.Size);
            row["表示状態"].Set(item.State.ToString());
        }
        return writer.ToString();
    }

    private async Task ExportCsv()
    {
        var csv = "\uFEFF" + GenerateCsv();
        var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
        var baseName = currentConfig?.Name;
        if (string.IsNullOrWhiteSpace(baseName)) baseName = "items";
        var fileName = $"{baseName}_{timestamp}.csv";
        await JS.InvokeVoidAsync("downloadFile", fileName, csv);
    }

    private async Task TriggerCsvImport()
    {
        if (csvInput is not null)
        {
            await JS.InvokeVoidAsync("triggerInputFile", csvInput.Element);
        }
    }

    private void ApplyCsv(string text)
    {
        using var reader = Sep.Reader(o => o with { Sep = new Sep(',') }).FromText(text);

        var header = reader.Header;
        int GetIdx(params string[] names)
        {
            foreach (var name in names)
            {
                if (header.TryIndexOf(name, out var idx)) return idx;
            }
            return -1;
        }

        var textIdx = GetIdx("項目名", "Text");
        if (textIdx < 0) return;
        var colorIdx = GetIdx("背景色", "Color");
        var countIdx = GetIdx("当たり数", "Count");
        var sizeIdx = GetIdx("サイズ", "Size");
        var stateIdx = GetIdx("表示状態", "State");

        foreach (var row in reader)
        {
            var name = row[textIdx].ToString().Trim();
            if (string.IsNullOrWhiteSpace(name)) continue;
            var item = items.FirstOrDefault(x => x.Text == name);
            if (item is null)
            {
                var last = items.Count > 0 ? items[^1] : null;
                item = RouletteItem.Create(name, last?.Color);
                if (last is not null)
                {
                    item.State = last.State;
                }
                items.Add(item);
            }
            if (colorIdx >= 0)
            {
                var color = row[colorIdx].ToString().Trim();
                if (!string.IsNullOrWhiteSpace(color)) item.Color = color;
            }
            if (countIdx >= 0)
            {
                var span = row[countIdx].Span;
                if (int.TryParse(span, out var cnt)) item.Count = cnt;
            }
            if (sizeIdx >= 0)
            {
                var span = row[sizeIdx].Span;
                if (double.TryParse(span, out var sz)) item.Size = sz;
            }
            if (stateIdx >= 0)
            {
                var stStr = row[stateIdx].ToString().Trim();
                if (Enum.TryParse<RouletteItemState>(stStr, out var st)) item.State = st;
            }
        }
    }

    private async Task ImportCsv(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 0) return;
        var file = e.File;
        using var stream = file.OpenReadStream(file.Size);
        using var readerText = new StreamReader(stream);
        var text = await readerText.ReadToEndAsync();
        ApplyCsv(text);
        MarkDirty();
    }

    private async Task Save()
    {
        configName = configName.Trim();
        if (string.IsNullOrWhiteSpace(configName))
        {
            await JS.InvokeVoidAsync("alert", "設定名を入力してください。");
            return;
        }

        foreach (var item in items)
        {
            item.Text = item.Text.Trim();
        }

        var arr = items
            .Where(x => !string.IsNullOrWhiteSpace(x.Text))
            .ToList();

        if (arr.Count == 0 || arr.Count != items.Count)
        {
            await JS.InvokeVoidAsync("alert", "項目を1つ以上設定し、すべての項目名を入力してください。");
            return;
        }

        if (currentConfig is null)
        {
            currentConfig = new RouletteConfig();
            configs.Add(currentConfig);
        }

        currentConfig.Name = configName;
        currentConfig.Items = arr;
        currentConfig.AutoAdjustSize = autoAdjustSize;
        currentConfig.ItemMultiplier = itemMultiplier;

        await RouletteConfig.SaveAsync(JS, configs);
        await JS.InvokeVoidAsync("localStorage.setItem", "rouletteItems", JsonSerializer.Serialize(arr));
        Nav.NavigateTo($"{currentConfig.Id}");
    }

    private void Back()
    {
        if (string.IsNullOrEmpty(Id))
        {
            Nav.NavigateTo("");
        }
        else
        {
            Nav.NavigateTo($"{Id}");
        }
    }
}
