@page "/{Id}"
@inject IJSRuntime JS
@inject NavigationManager Nav
@using System.Text.Json
@using Microsoft.JSInterop
@using System.Globalization
@using System.Collections.Generic
@using System.Linq
@implements IDisposable

<PageTitle>@selectedConfig - ルーレット</PageTitle>

<div class="text-center config-header">
    <h4>@(string.IsNullOrEmpty(selectedConfig) ? "設定なし" : selectedConfig)</h4>
</div>
<div id="rouletteContainer" class="roulette-container">
    <canvas id="rouletteCanvas" width="300" height="300" @onclick="ToggleSpin"></canvas>
    <div class="pointer"></div>
    @if (showOverlay)
    {
        <div id="resultOverlay" class="overlay" @onclick="HideOverlay">
            <div id="overlayContent" class="overlay-content" style="@($"background-color:{overlayColor};color:{overlayTextColor};left:{overlayLeft}px;top:{overlayTop}px;")">
                @overlayText
            </div>
        </div>
    }
</div>
<div class="mt-3 text-center">
    <button class="btn btn-primary start-stop-button" @onclick="ToggleSpin" disabled="@((isStopping) || (isSpinning && autoStop))">@(isSpinning ? "ストップ" : "スタート")</button>
</div>
<div class="mt-3 text-center">
    <div class="form-check form-switch d-inline-block">
        <input class="form-check-input" type="checkbox" id="autoStopToggle" @bind="autoStop" @bind:after="OnAutoStopChanged" />
        <label class="form-check-label" for="autoStopToggle">自動ストップ</label>
    </div>
</div>
<div class="text-center mt-2">
    <h5 class="count-header" @onclick="ToggleCounts">当たり回数 @(showCounts ? "▲" : "▼")</h5>
    @if (showCounts)
    {
        <table class="table table-sm count-table">
            <thead>
                <tr>
                    <th>項目</th>
                    <th class="text-end">回数</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in items.Distinct())
                {
                    <tr>
                        <td>
                            <span class="color-box" style="background-color:@item.Color"></span>
                            @item.Text
                        </td>
                        <td class="text-end">@item.Count</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
<div class="text-center mt-2">
    <button class="btn btn-secondary ms-2" @onclick="OpenManage">一覧</button>
    <button class="btn btn-secondary settings-button" @onclick="OpenSettings">設定</button>
</div>

@code {
    [Parameter]
    public string? Id { get; set; }

    private string? currentId;
    private RouletteItem[] items = new[]
    {
        RouletteItem.Create("A"),
        RouletteItem.Create("B"),
        RouletteItem.Create("C"),
        RouletteItem.Create("D")
    };
    private bool isSpinning;
    private bool isStopping;
    private bool showOverlay;
    private bool showCounts;
    private double overlayLeft;
    private double overlayTop;
    private string overlayText = string.Empty;
    private string overlayColor = "white";
    private string overlayTextColor = "black";
    private DotNetObjectReference<Main>? objRef;
    private string selectedConfig = string.Empty;
    private bool autoAdjustSize = true;
    private bool autoStop = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || currentId != Id)
        {
            currentId = Id;
            var configs = await RouletteConfig.LoadAsync(JS);

            if (string.IsNullOrEmpty(Id))
            {
                Nav.NavigateTo("");
                return;
            }

            var cfg = configs.FirstOrDefault(c => c.Id == Id);
            if (cfg is null)
            {
                Nav.NavigateTo("");
                return;
            }

            var multiplier = cfg.ItemMultiplier <= 1 ? 1 : cfg.ItemMultiplier;
            var list = new List<RouletteItem>(cfg.Items.Count * multiplier);
            for (int i = 0; i < multiplier; i++)
            {
                list.AddRange(cfg.Items);
            }
            items = list.ToArray();
            selectedConfig = cfg.Name;
            autoAdjustSize = cfg.AutoAdjustSize;

            if (items.Length == 0 || items.All(i => string.IsNullOrWhiteSpace(i.Text)))
            {
                Nav.NavigateTo($"setting/{Id}");
                return;
            }

            ApplyWeights();

            objRef ??= DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("rouletteHelper.initialize", "rouletteCanvas", ItemsForJs(), objRef);
            await JS.InvokeVoidAsync("rouletteHelper.setAutoStopEnabled", autoStop);

            StateHasChanged();
        }

    }

    private async Task ToggleSpin()
    {
        if (isStopping)
        {
            return;
        }

        if (isSpinning)
        {
            if (autoStop)
            {
                return;
            }
            isStopping = true;
        }

        isSpinning = !isSpinning;
        await JS.InvokeVoidAsync("rouletteHelper.toggleSpin");
    }

    private void ToggleCounts()
    {
        showCounts = !showCounts;
    }

    [JSInvokable]
    public async Task OnRouletteStopped(int index)
    {
        isStopping = false;
        isSpinning = false;
        if (index >= 0 && index < items.Length)
        {
            var item = items[index];
            overlayText = item.Text;
            overlayColor = item.Color;
            overlayTextColor = GetContrastColor(item.Color);
            var center = await JS.InvokeAsync<double[]>("rouletteHelper.getContainerCenter", "rouletteCanvas");
            if (center?.Length == 2)
            {
                overlayLeft = center[0];
                overlayTop = center[1];
            }
            await Task.Delay(500);
            showOverlay = true;

            if (!string.IsNullOrWhiteSpace(item.Text))
            {
                item.Count++;
                await SaveCountsAsync();
                ApplyWeights();
            }

            StateHasChanged();
        }

    }

    [JSInvokable]
    public void OnAutoStop()
    {
        isStopping = true;
        isSpinning = false;
        StateHasChanged();
    }

    private void ApplyWeights()
    {
        if (items.Length == 0) return;

        if (autoAdjustSize)
        {
            var min = items.Min(i => i.Count);
            foreach (var item in items)
            {
                var count = item.Count;
                item.Size = 1.0 / (count - min + 1);
                item.Weight = item.Size;
            }
        }
        else
        {
            foreach (var item in items)
            {
                item.Weight = item.Size > 0 ? item.Size : 1;
            }
        }
    }

    private async void HideOverlay()
    {
        showOverlay = false;
        await JS.InvokeVoidAsync("rouletteHelper.initialize", "rouletteCanvas", ItemsForJs(), objRef);
    }

    private async Task OnAutoStopChanged()
    {
        await JS.InvokeVoidAsync("rouletteHelper.setAutoStopEnabled", autoStop);
    }

    private async Task SaveCountsAsync()
    {
        var configs = await RouletteConfig.LoadAsync(JS);
        var cfg = configs.FirstOrDefault(c => c.Id == Id);
        if (cfg is not null)
        {
            cfg.Items = items.Distinct().ToList();
            await RouletteConfig.SaveAsync(JS, configs);
        }
    }

    private static string GetContrastColor(string hex)
    {
        if (string.IsNullOrWhiteSpace(hex)) return "black";
        hex = hex.TrimStart('#');
        if (hex.Length == 3)
        {
            hex = string.Concat(hex[0], hex[0], hex[1], hex[1], hex[2], hex[2]);
        }
        if (hex.Length != 6) return "black";

        var r = int.Parse(hex.Substring(0, 2), NumberStyles.HexNumber);
        var g = int.Parse(hex.Substring(2, 2), NumberStyles.HexNumber);
        var b = int.Parse(hex.Substring(4, 2), NumberStyles.HexNumber);

        var brightness = (r * 299 + g * 587 + b * 114) / 1000;
        return brightness > 128 ? "black" : "white";
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    private object[] ItemsForJs()
    {
        return items.Select(i => new { text = i.Text, color = i.Color, weight = i.Weight }).ToArray();
    }

    private void OpenSettings()
    {
        Nav.NavigateTo($"setting/{Id}");
    }

    private void OpenManage()
    {
        Nav.NavigateTo("");
    }
}
