@using System
@using System.Linq
@using Roulette.Models

<div class="mb-3">
    <ToggleSection Title="色一括設定ツール" @bind-IsOpen="open">
        <div class="mb-3">
            <button class="btn btn-secondary" @onclick="AssignAutoForeground">文字色を自動に設定</button>
        </div>
        <div class="mb-3">
            <label class="form-label">開始色相: @startHue.ToString("0")</label>
            <input type="range" class="form-range" min="0" max="360" step="1" @bind="startHue" @bind:event="oninput" />
        </div>
        <div class="mb-3">
            <label class="form-label">明度: @lightness.ToString("0.00")</label>
            <input type="range" class="form-range" min="0" max="1" step="0.01" @bind="lightness" @bind:event="oninput" />
        </div>
        <div class="mb-3">
            <label class="form-label">彩度: @chroma.ToString("0.00")</label>
            <input type="range" class="form-range" min="0" max="0.4" step="0.01" @bind="chroma" @bind:event="oninput" />
        </div>
        <div class="d-flex mb-3">
            <span>色見本:</span>
            @foreach (var color in previewColors)
            {
                <div class="preview-box me-2" style="background-color:@color"></div>
            }
        </div>
        <div class="mb-3 d-flex">
            <button class="btn btn-primary" @onclick="AssignForegroundEven">文字色に均等適用</button>
            <button class="btn btn-primary ms-2" @onclick="AssignForegroundRandom">文字色にランダム適用</button>
        </div>
        <div class="mb-3 d-flex">
            <button class="btn btn-primary" @onclick="AssignEven">背景に均等適用</button>
            <button class="btn btn-primary ms-2" @onclick="AssignRandom">背景にランダム適用</button>
        </div>
        <hr />
        <div class="mb-3">
            <label class="form-label">一括適用色</label>
            <input type="color" class="form-control form-control-color" @bind="solidColor" />
        </div>
        <div class="mb-3 d-flex">
            <button class="btn btn-primary" @onclick="AssignForegroundSolid">文字色に適用</button>
            <button class="btn btn-primary ms-2" @onclick="AssignBackgroundSolid">背景に適用</button>
        </div>
    </ToggleSection>
</div>

@code {
    [Parameter] public List<RouletteItem> Items { get; set; } = new();
    [Parameter] public EventCallback OnChanged { get; set; }

    private bool open;

    private double _lightness = 0.8;
    private double lightness
    {
        get => _lightness;
        set
        {
            _lightness = value;
            UpdatePreview();
        }
    }

    private double _chroma = 0.1;
    private double chroma
    {
        get => _chroma;
        set
        {
            _chroma = value;
            UpdatePreview();
        }
    }

    private double _startHue;
    private double startHue
    {
        get => _startHue;
        set
        {
            _startHue = value;
            UpdatePreview();
        }
    }

    private readonly Random rand = new();
    private readonly string[] previewColors = new string[3];
    private bool initialized;
    private string solidColor = "#000000";

    protected override void OnParametersSet()
    {
        if (!initialized && Items.Count > 0)
        {
            var (l, c, h) = ColorUtil.HexToOklch(Items[^1].BackgroundColor);
            _lightness = Math.Clamp(l, 0, 1);
            _chroma = Math.Clamp(c, 0, 0.4);
            _startHue = h;
            UpdatePreview();
            initialized = true;
        }
    }

    private void AssignEven()
    {
        if (Items.Count == 0) return;
        for (int i = 0; i < Items.Count; i++)
        {
            var hue = (startHue + 360.0 * i / Items.Count) % 360.0;
            Items[i].BackgroundColor = ColorUtil.OklchToHex(lightness, chroma, hue);
        }
        OnChanged.InvokeAsync();
    }

    private void AssignRandom()
    {
        if (Items.Count == 0) return;

        var hues = Enumerable.Range(0, Items.Count)
            .Select(i => (startHue + 360.0 * i / Items.Count) % 360.0)
            .ToList();

        for (int i = hues.Count - 1; i > 0; i--)
        {
            int j = rand.Next(i + 1);
            (hues[i], hues[j]) = (hues[j], hues[i]);
        }

        for (int i = 0; i < Items.Count; i++)
        {
            Items[i].BackgroundColor = ColorUtil.OklchToHex(lightness, chroma, hues[i]);
        }
        OnChanged.InvokeAsync();
    }

    private void AssignForegroundEven()
    {
        if (Items.Count == 0) return;
        foreach (var item in Items) item.AutoForegroundColor = false;
        for (int i = 0; i < Items.Count; i++)
        {
            var hue = (startHue + 360.0 * i / Items.Count) % 360.0;
            Items[i].ForegroundColor = ColorUtil.OklchToHex(lightness, chroma, hue);
        }
        OnChanged.InvokeAsync();
    }

    private void AssignForegroundRandom()
    {
        if (Items.Count == 0) return;

        var hues = Enumerable.Range(0, Items.Count)
            .Select(i => (startHue + 360.0 * i / Items.Count) % 360.0)
            .ToList();

        for (int i = hues.Count - 1; i > 0; i--)
        {
            int j = rand.Next(i + 1);
            (hues[i], hues[j]) = (hues[j], hues[i]);
        }

        for (int i = 0; i < Items.Count; i++)
        {
            Items[i].AutoForegroundColor = false;
            Items[i].ForegroundColor = ColorUtil.OklchToHex(lightness, chroma, hues[i]);
        }
        OnChanged.InvokeAsync();
    }

    private void AssignAutoForeground()
    {
        foreach (var item in Items)
        {
            item.AutoForegroundColor = true;
        }
        OnChanged.InvokeAsync();
    }

    private void AssignForegroundSolid()
    {
        foreach (var item in Items)
        {
            item.AutoForegroundColor = false;
            item.ForegroundColor = solidColor;
        }
        OnChanged.InvokeAsync();
    }

    private void AssignBackgroundSolid()
    {
        foreach (var item in Items)
        {
            item.BackgroundColor = solidColor;
        }
        OnChanged.InvokeAsync();
    }

    private void UpdatePreview()
    {
        for (int i = 0; i < previewColors.Length; i++)
        {
            var hue = (startHue + 360.0 * i / previewColors.Length) % 360.0;
            previewColors[i] = ColorUtil.OklchToHex(lightness, chroma, hue);
        }
    }
}
