@page "/"
@implements IDisposable
@inject IJSRuntime JS
@inject UpdateConfigEventSource UpdateConfigEventSource
@inject NavigationManager NavigationManager

<PageTitle>ルーレット</PageTitle>

<h1>ルーレット</h1>

<p>@_config?.Items!.Count()</p>
@if (_config?.Items is [.., { } v])
{
    <p>@v.Name</p>
}

<button class="btn btn-primary" @onclick="OpenControllerAsync">設定</button>

@code {
    [SupplyParameterFromQuery(Name = "url")]
    private string? Url { get; set; }

    [SupplyParameterFromQuery(Name = "data")]
    private string? Data { get; set; }

    private RouletteConfig? _config;

    protected override void OnInitialized()
    {
        UpdateConfigEventSource.ConfigUpdated += OnConfigUpdated;

        if (Url is { })
        {
            if (string.IsNullOrEmpty(new Uri(Url).Host)) NavigationManager.NavigateTo(Url, false, true);
            else NavigationManager.NavigateTo(NavigationManager.BaseUri, false, true);
        }
        else
        {
            if (Data is { })
            {
                _config = Serializer.Deserialize<RouletteConfig>(Data);
            }
            else
            {
                _config = new RouletteConfig { Items = [] };
                FlushParameter();
            }
        }
    }

    void IDisposable.Dispose()
    {
        UpdateConfigEventSource.ConfigUpdated -= OnConfigUpdated;
    }

    private async Task OpenControllerAsync()
    {
        await JS.InvokeVoidAsync("openController", Data);
    }

    private void FlushParameter()
    {
        Data = Serializer.Serialize(_config);
        var url = NavigationManager.GetUriWithQueryParameter("data", Data);
        NavigationManager.NavigateTo(url);
    }

    private void OnConfigUpdated(RouletteConfig config)
    {
        _config = config;
        FlushParameter();
        StateHasChanged();
    }
}
