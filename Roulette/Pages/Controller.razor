@page "/controller"
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<PageTitle>設定 - ルーレット</PageTitle>

<h1>ルーレットの設定</h1>

@if (_openerIsClosed)
{
    <p>
        ルーレットのウィンドウとのリンクが切れました。<br />
        ウィンドウを閉じましたか？
    </p>
}

<button class="btn btn-warning" @onclick="UpdateAsync">更新</button>
<button class="btn btn-warning" @onclick="UpdateAndCloseAsync">更新して閉じる</button>

@code {
    private bool _openerIsClosed;

    [SupplyParameterFromQuery(Name = "data")]
    private string? Data { get; set; }

    private RouletteConfig? _config;

    protected override void OnInitialized()
    {
        if (Data is { })
        {
            _config = Serializer.Deserialize<RouletteConfig>(Data);
        }
        else
        {
            _config = new RouletteConfig { Items = [] };
        }
    }

    private void FlushParameter()
    {
        Data = Serializer.Serialize(_config);
        var url = NavigationManager.GetUriWithQueryParameter("data", Data);
        NavigationManager.NavigateTo(url);
    }

    private Task UpdateAsync()
    {
        return UpdateAsync(false);
    }

    private Task UpdateAndCloseAsync()
    {
        return UpdateAsync(true);
    }

    private async Task UpdateAsync(bool closeController)
    {
        _config!.Items = [.. _config!.Items, new RouletteItem { Name = DateTime.Now.ToString("HH:mm:ss") }];
        FlushParameter();
        _openerIsClosed = !await JS.InvokeAsync<bool>("updateConfig", _config, closeController);
    }
}
