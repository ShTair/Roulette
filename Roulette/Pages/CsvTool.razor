@page "/csv/{Id}"
@inject IJSRuntime JS
@inject NavigationManager Nav
@using System.Collections.Generic
@using System.Linq
@using System
@using System.IO
@using Roulette.Models
@using nietras.SeparatedValues

<PageTitle>CSVツール - ルーレット</PageTitle>

<h3>CSVツール</h3>

<div class="alert alert-warning">
    <p class="mb-1">
        この機能は設定一覧ページの「設定書き出し」とは目的が異なり、現在開いているルーレット項目だけを CSV で編集するためのものです。読み込み時は次のルールで反映されます。
    </p>
    <ul class="mb-0">
        <li>同じ項目名の行は既存の値を CSV の内容で上書きします。項目名が重複しているとどの行が使われるか分からず、正しく更新できません。</li>
        <li>CSV に存在しない項目名の行は新しい項目として追加されます。</li>
        <li>セルが空白だったり CSV に列が無い値は、現在の設定値がそのまま維持されます。</li>
        <li>新しく追加された項目で空白のままの値には、背景色や当たり数などの初期値が自動で設定されます。</li>
    </ul>
</div>

<div class="mb-3 d-flex">
    <button class="btn btn-secondary" @onclick="ExportCsv">CSV書き出し</button>
    <button class="btn btn-secondary ms-2" @onclick="TriggerCsvImport">CSV読み込み</button>
    <button class="btn btn-secondary ms-auto" @onclick="Back">戻る</button>
    <InputFile OnChange="ImportCsv" style="display:none" @ref="csvInput" accept=".csv,text/csv" />
</div>

@code {
    [Parameter]
    public string? Id { get; set; }

    private List<RouletteItem> items = new();
    private List<RouletteConfig> configs = new();
    private RouletteConfig? currentConfig;
    private InputFile? csvInput;

    protected override async Task OnInitializedAsync()
    {
        configs = await RouletteConfig.LoadAsync(JS);
        if (string.IsNullOrEmpty(Id))
        {
            Nav.NavigateTo("setting");
            return;
        }
        currentConfig = configs.FirstOrDefault(c => c.Id == Id);
        if (currentConfig is null)
        {
            Nav.NavigateTo("setting");
            return;
        }
        items = currentConfig.Items.ToList();
    }

    private string GenerateCsv()
    {
        using var writer = Sep.Writer(o => o with { Sep = new Sep(',') }).ToText();
        foreach (var item in items)
        {
            using var row = writer.NewRow();
            row["項目名"].Set(item.Text);
            row["背景色"].Set(item.Color);
            row["当たり数"].Format(item.Count);
            row["サイズ"].Format(item.Size);
            row["表示状態"].Set(item.State.ToString());
        }
        return writer.ToString();
    }

    private async Task ExportCsv()
    {
        var csv = "\uFEFF" + GenerateCsv();
        var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
        var baseName = currentConfig?.Name;
        if (string.IsNullOrWhiteSpace(baseName)) baseName = "items";
        var fileName = $"{baseName}_{timestamp}.csv";
        await JS.InvokeVoidAsync("downloadFile", fileName, csv);
    }

    private async Task TriggerCsvImport()
    {
        if (csvInput is not null)
        {
            await JS.InvokeVoidAsync("triggerInputFile", csvInput.Element);
        }
    }

    private void ApplyCsv(string text)
    {
        using var reader = Sep.Reader(o => o with { Sep = new Sep(',') }).FromText(text);

        var header = reader.Header;
        int GetIdx(params string[] names)
        {
            foreach (var name in names)
            {
                if (header.TryIndexOf(name, out var idx)) return idx;
            }
            return -1;
        }

        var textIdx = GetIdx("項目名", "Text");
        if (textIdx < 0) return;
        var colorIdx = GetIdx("背景色", "Color");
        var countIdx = GetIdx("当たり数", "Count");
        var sizeIdx = GetIdx("サイズ", "Size");
        var stateIdx = GetIdx("表示状態", "State");

        foreach (var row in reader)
        {
            var name = row[textIdx].ToString().Trim();
            if (string.IsNullOrWhiteSpace(name)) continue;
            var item = items.FirstOrDefault(x => x.Text == name);
            if (item is null)
            {
                var last = items.Count > 0 ? items[^1] : null;
                item = RouletteItem.Create(name, last?.Color);
                if (last is not null)
                {
                    item.State = last.State;
                }
                items.Add(item);
            }
            if (colorIdx >= 0)
            {
                var color = row[colorIdx].ToString().Trim();
                if (!string.IsNullOrWhiteSpace(color)) item.Color = color;
            }
            if (countIdx >= 0)
            {
                var span = row[countIdx].Span;
                if (int.TryParse(span, out var cnt)) item.Count = cnt;
            }
            if (sizeIdx >= 0)
            {
                var span = row[sizeIdx].Span;
                if (double.TryParse(span, out var sz)) item.Size = sz;
            }
            if (stateIdx >= 0)
            {
                var stStr = row[stateIdx].ToString().Trim();
                if (Enum.TryParse<RouletteItemState>(stStr, out var st)) item.State = st;
            }
        }
    }

    private async Task ImportCsv(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 0) return;
        var file = e.File;
        using var stream = file.OpenReadStream(file.Size);
        using var readerText = new StreamReader(stream);
        var text = await readerText.ReadToEndAsync();
        ApplyCsv(text);
        await SaveAsync();
        Back();
    }

    private async Task SaveAsync()
    {
        if (currentConfig is not null)
        {
            currentConfig.Items = items;
            await RouletteConfig.SaveAsync(JS, configs);
        }
    }

    private void Back()
    {
        Nav.NavigateTo($"setting/{Id}");
    }
}
